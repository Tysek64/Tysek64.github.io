<!doctype html>
<html>
<head>
	<style>
		body {
			background-color: #99D9EA;
		}
		h1 {
			font-family: "Lucida console";
			text-align: left;
		}
		button {
			background-color: #00A2E8;
			border: 2px solid #00A2E8;
			font-family: "Lucida console";
			font-size: 12pt;
			transition-duration: 0.2s;
			cursor: pointer;
		}
		button:hover {
			background-color: #99D9EA;
			border: 2px solid #00A2E8;
		}
		p {
			font-family: "Lucida console";
			font-size: 12pt;
		}
		input {
			background-color: #00A2E8;
			border: 2px solid #00A2E8;
			font-family: "Lucida console";
			font-size: 12pt;
			width: 500px;
		}
	</style>
	<title>Lepszy kalkulator</title>
	<meta charset="UTF-8">
<head>
<body>
	<canvas id="tabulaRasa" width=640 height=480 style="display: none;"></canvas>
	<table>
		<tr>
			<td><button onclick="save()">przycister</button></td>
			<td><button onclick="erase()">antyprzycister</button></td>
			<td><button onclick='document.getElementById("solution").innerHTML = ""'>czyść ekran</button></td>
		</tr>
	</table>
	<table>
		<tr>
			<input id="equation" value="Podaj działanie. Liczby ujemne podaj w nawiasach." onmouseover="clearInput()" style="color: #646464"></input>
		</tr>
		<tr>
			<td><button onclick = "start()">Użyj kalkulatora!!!</button></td>
		</tr>
	</table>
	<p id="memory">Pamięć: </p>
	<h1 id="solution"></h1>
	<script>
		console.log(Math.floor(Math.random() * 2) == 0 ? "Hugokopter:)" : "AntyHugokopter:(");

		var canvas = document.getElementById("tabulaRasa");
		var context = canvas.getContext("2d");
		
		var x = canvas.width / 2;
		var y = canvas.height / 4;
		
		var signs = ['+', '-', '*', '/', '^', '@'];
		var weight = [1, 1, 2, 2, 3, 3];

		var memory = 0;
		
		var Node = function(l, r, val, stage) {
			this.l = l;
			this.r = r;
			this.val = val;
			this.x = 0;
			this.y = 0;
			this.filled = false;
			this.rawStage = stage;
			this.stage = canvas.width / (2 * Math.pow(2, stage));
		}
		
		Node.prototype.draw = function() {
			if (this.x == 0 && this.y == 0) {
				this.x = x;
				this.y = y;
			} else {
				x = this.x;
				y = this.y;
			}
			context.strokeStyle = "Black";
			context.lineWidth = "2px";
			
			context.fillStyle = "Black";
			context.font = "14px Arial";
			
			context.fillText(this.val, this.x, this.y);
			
			context.beginPath();
			context.moveTo(x, y);
			context.lineTo(x -= this.stage, y *= 1.5);
			context.stroke();
			
			if (typeof(this.l) == "object") {
				this.l.draw();
			} else {
				context.fillStyle = "Black";
				context.font = "14px Arial";
			
				context.fillText(this.l, x, y);
			}
			
			x = this.x;
			y = this.y;
			
			context.beginPath();
			context.moveTo(x, y);
			context.lineTo(x += this.stage, y *= 1.5);
			context.stroke();
			
			if (typeof(this.r) == "object") {
				this.r.draw();
			} else {
				context.fillStyle = "Black";
				context.font = "14px Arial";
			
				context.fillText(this.r, x, y);
			}
		}
		
		Node.prototype.solve = function () {
			if (typeof(this.l) == "object") {
				this.l.solve();
				this.l = this.l.val;
			}
			if (typeof(this.r) == "object") {
				this.r.solve();
				this.r = this.r.val;
			}
			if (this.l == 'PI' || this.l == 'Pi' || this.l == 'pI' || this.l == 'pi') {
				this.l = 3.1415926535897932384626433;
			} else if (this.l == 'M' || this.l == 'm') {
				this.l = memory;
			}
			if (this.r == 'PI' || this.r == 'Pi' || this.r == 'pI' || this.r == 'pi') {
				this.r = 3.1415926535897932384626433;
			} else if (this.r == 'M' || this.r == 'm') {
				this.r = memory;
			}
			switch (this.val) {
				case '+':
					this.val = Number(this.l) + Number(this.r);
					break;
				case '-':
					this.val = Number(this.l) - Number(this.r);
					break;
				case '*':
					this.val = Number(this.l) * Number(this.r);
					break;
				case '/':
					this.val = Number(this.l) / Number(this.r);
					break;
				case '^':
					this.val = Math.pow(Number(this.l), Number(this.r));
					break;
				case '@':
					this.val = Math.pow(Number(this.l), 1 / Number(this.r));
					break;
			}
		}
		
		var equation = "";

		function clearInput () {
			if (document.getElementById("equation").style.color == "rgb(100, 100, 100)") {
				document.getElementById("equation").value=""
				document.getElementById("equation").style.color = "rgb(0, 0, 0)"
			}
		}

		var tree = new Node("a", "", '+', 1);
		var useSpaces = false;

		function save () {
			if (signs.indexOf(tree.val) == -1) {
				memory = tree.val;
				document.getElementById("memory").innerHTML = "Pamięć: " + memory;
			}
		}

		function erase () {
			memory = undefined;
			document.getElementById("memory").innerHTML = "Pamięć: ";
		}

		function clear () {
			document.getElementById("solution").innerHTML = "";
		}

		function start () {
			equation = document.getElementById("equation").value;
			tree = treeify(1, equation);
			tree.draw();
			tree.solve();
			if (!isNaN(tree.val) && Math.abs(tree.val) != Infinity) {
				document.getElementById("solution").innerHTML = equation + (useSpaces ? " = " : "=") + tree.val;
			} else {
				document.getElementById("solution").innerHTML = "Podaj LICZBY źlaku!";
			}
		}
		
		function calculateBrackets (code) {
			var stage = 1;
			var result = "";
			for (var i = 0;i < code.length;i++) {
				if (code[i] == ')' && stage == 1) {
					break;
				} else {
					if (code[i] == '(') {
						stage++;
					}
					if (code[i] == ')') {
						stage--;
					}
					result += code[i];
				}
			}
			return result;
		}

		function calculateAbs (code) {
			var stage = 1;
			var result = "";
			for (var i = 0;i < code.length;i++) {
				if (code[i] == ']' && stage == 1) {
					break;
				} else {
					if (code[i] == '[') {
						stage++;
					}
					if (code[i] == ']') {
						stage--;
					}
					result += code[i];
				}
			}
			return result;
		}
		
		function treeify (beginStage, code) {
			var master = new Node("a", "", '+', beginStage);
			var pointer = master;
			var temp = 0;
			for (var i = 0;i < code.length;i++) {
				if (code[i] == ' ') {
					useSpaces = true;
				} else if (signs.indexOf(code[i]) != -1) {
					if (pointer.filled == false) {
						pointer.val = code[i];
						pointer.filled = true;
					} else {
						if (weight[signs.indexOf(code[i])] > weight[signs.indexOf(pointer.val)]) {
							temp = pointer.r;
							pointer.r = new Node(temp, "", code[i], pointer.rawStage + 1);
							pointer = pointer.r;
							pointer.filled = true;
						} else {
							temp = pointer.l;
							pointer.l = new Node(temp, pointer.r, pointer.val, pointer.rawStage + 1);
							pointer.val = code[i];
							pointer.r = 0;
							pointer.filled = true;
						}
					}
				} else if (code[i] == '(') {
					var codeInBrackets = calculateBrackets(code.slice(i + 1));
					if (pointer.filled == false) {
						pointer.l = treeify(pointer.rawStage + 1, codeInBrackets);
					} else {
						temp = pointer.r;
						pointer.r = treeify(pointer.rawStage += 1, codeInBrackets);
						pointer = pointer.r;
						pointer.filled = true;
					}
					i += codeInBrackets.length;
				} else if (code[i] == '[') {
					var codeInAbs = calculateAbs(code.slice(i + 1));
					var solved = treeify(pointer.rawStage + 1, codeInAbs);
					solved.solve();
					solved = solved.val;
					if (pointer.filled == false) {
						pointer.l = solved < 0 ? -solved : solved;
					} else {
						temp = pointer.r;
						pointer.r = solved < 0 ? -solved : solved;
						pointer.filled = true;
					}
					i += codeInAbs.length;
				} else if (code[i] != ')' && code[i] != ']') {
					if (pointer.l == 'a') {
						pointer.l = "";
					}
					if (pointer.filled == false) {
						pointer.l +=code[i];
					} else {
						pointer.r += code[i];
					}
				}
			}
			return master;
		}
	</script>
</body>
</html>
