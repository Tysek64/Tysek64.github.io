<!DOCTYPE html>
<html>
<head>
	<title>Game</title>
</head>
<body>
	<canvas id="tabulaRasa" width=1000 height=400></canvas>

	<p></p>

	<input id="audio_file" type="file" accept="audio/*" style="display:none;"></input>
	<audio id="audio_player"></audio>
	<button onclick="startProg()" id="start">START</button>
	<script>
		var canvas = document.getElementById("tabulaRasa");
		var context = canvas.getContext("2d");

		var WIDTH = canvas.width;
		var HEIGHT = canvas.height;

		var audioContext = undefined;

		var audioBuffer = null;

		var source = undefined;
		var source1 = undefined;
		var filter = undefined;
		var analyser = undefined;
		var gain = undefined;
		var source2 = undefined;
		var filter2 = undefined;
		var analyser2 = undefined;
		var gain2 = undefined;

		var bufferLength = undefined;
		var dataArray = undefined;
		var deltaTime = 0;
		var difference = 0;

		var avgDelta = 0;
		var tickCount = 0;

		var avgLevel = 0;
		var prevLevel = 0;

		var rhythm = false;
		var showDrum = false;

		var drums = [];

		var spacePress = false;

		var lastTime = 0;
		
		var bufferLength2 = undefined;
		var dataArray2 = undefined;
		var deltaTime2 = 0;
		var difference2 = 0;

		var avgDelta2 = 0;
		var tickCount2 = 0;

		var avgLevel2 = 0;
		var prevLevel2 = 0;

		var rhythm2 = false;
		var showDrum2 = false;

		var drums2 = [];

		var spacePress2 = false;

		var lastTime2 = 0;

		context.fillStyle = "Red";

		context.fillRect(0, 0, 10, 10);

		function loadSound (url) {
			var request = new XMLHttpRequest();
			request.open("GET", url, true);
			request.responseType = "arraybuffer";

			request.onload = function () {
				audioContext.decodeAudioData(request.response, function(buffer) {
					audioBuffer = buffer;
				});
			}
			request.send();
		}

		function startProg () {
			document.getElementById("start").style.display = "none";
			document.getElementById("audio_file").style.display = "block";

			audioContext = new AudioContext();

			analyser = audioContext.createAnalyser();
			analyser2 = audioContext.createAnalyser();
		}

		function playSoundA(buffer) {
			source = audioContext.createBufferSource();
			source1 = audioContext.createBufferSource();
			source2 = audioContext.createBufferSource();

			filter = audioContext.createBiquadFilter();
			filter.type = "lowpass";
			filter.frequency.value = 220;

			source.buffer = buffer;
			source1.buffer = buffer;

			gain = audioContext.createGain();
			gain.gain.value = 0;

			source1.connect(audioContext.destination);

			gain.connect(audioContext.destination);
			analyser.connect(gain);
			filter.connect(analyser);
			source.connect(filter);

			bufferLength = analyser.frequencyBinCount;
			dataArray = new Uint8Array(bufferLength);

			analyser.getByteTimeDomainData(dataArray);
			
			filter2 = audioContext.createBiquadFilter();
			filter2.type = "bandpass";
			filter2.frequency.value = 500;

			source2.buffer = buffer;

			gain2 = audioContext.createGain();
			gain2.gain.value = 0;

			gain2.connect(audioContext.destination);
			analyser2.connect(gain2);
			filter2.connect(analyser2);
			source2.connect(filter2);

			bufferLength2 = analyser2.frequencyBinCount;
			dataArray2 = new Uint8Array(bufferLength2);

			analyser2.getByteTimeDomainData(dataArray2);

			source.start(audioContext.currentTime);
			source2.start(audioContext.currentTime);
			source1.start(audioContext.currentTime + 3);

			console.log("a");
		}

		audio_file.onchange = function(){
			var files = this.files;
			var file = URL.createObjectURL(files[0]); 
			audio_player.src = file;

			loadSound(file);
			
			document.getElementById("audio_file").disabled = true;

			setTimeout(function () {
				document.getElementById("audio_file").style.display = "none";
				document.getElementById("start").setAttribute("onClick", "beginGame()");
				document.getElementById("start").style.display = "block";
			}, 5000);
		};

		function beginGame () {
			playSoundA(audioBuffer);
			draw();
			document.getElementById("start").disabled = true;
		}

		function draw () {
			context.fillStyle = "White";
			context.fillRect(0, 0, WIDTH, HEIGHT);

			var drawVisual = requestAnimationFrame(draw);

			analyser.getByteTimeDomainData(dataArray);

			prevLevel = avgLevel;

			avgLevel = 0;

			for (var i = 0;i < bufferLength;i++) {
				avgLevel += dataArray[i];
			}

			avgLevel /= bufferLength;

			var delta = prevLevel - avgLevel;

			if (delta < 5.5 && deltaTime < 7) {
				deltaTime++;
			}

			if (delta < 5.5 && difference < 25) {
				difference++;
			}

			if (delta > 5.5) {
				deltaTime = 0;
			}

			if (delta > 5.5 && (difference < 7 || difference > 15)) {
				difference = 0;
			}

			rhythm = (delta > 5.5 || deltaTime < 7) && difference < 7 ? true : false;

			if (rhythm && !showDrum) {
				drums.push(Date.now());
				showDrum = true;

				lastTime = Date.now();
				
				if (lastTime - lastTime2 < 50) {
					drums.pop();
					drums.push(lastTime2);

					lastTime = lastTime2;
				}
			}

			if (!rhythm) {
				showDrum = false;
			}

			context.strokeStyle = "Black";

			context.strokeRect(40, 40, 30, 30);

			if (spacePress) {
				context.beginPath();
				context.moveTo(40, 40);
				context.lineTo(70, 70);
				context.moveTo(40, 70);
				context.lineTo(70, 40);
				context.stroke();
			}
			
			for (var i = 0;i < drums.length;i++) {
				context.fillStyle = "Red";
				context.fillRect(990 - 0.33 * (Date.now() - drums[i]) + 50, 50, 10, 10);

				if (((990 - 0.33 * (Date.now() - drums[i])) > -20) && ((990 - 0.33 * (Date.now() - drums[i])) < 20) && spacePress) {
					drums.splice(i, 1);
					console.log("a");
				}
			}

			
			analyser2.getByteTimeDomainData(dataArray2);

			prevLevel2 = avgLevel2;

			avgLevel2 = 0;

			for (var i = 0;i < bufferLength2;i++) {
				avgLevel2 += dataArray2[i];
			}

			avgLevel2 /= bufferLength2;

			var delta2 = prevLevel2 - avgLevel2;

			if (delta2 < 0.45 && deltaTime2 < 7) {
				deltaTime2++;
			}

			if (delta2 < 0.45 && difference2 < 25) {
				difference2++;
			}

			if (delta2 > 0.45) {
				deltaTime2 = 0;
			}

			if (delta2 > 0.45 && (difference2 < 7 || difference2 > 15)) {
				difference2 = 0;
			}

			rhythm2 = (delta2 > 0.45 || deltaTime2 < 7) && difference2 < 7 ? true : false;

			if (rhythm2 && !showDrum2) {
				drums2.push(Date.now());
				showDrum2 = true;

				lastTime2 = Date.now();

				if (lastTime2 - lastTime < 50) {
					drums2.pop();
					drums2.push(lastTime);

					lastTime2 = lastTime;
				}
			}

			if (!rhythm2) {
				showDrum2 = false;
			}

			context.strokeStyle = "Black";

			context.strokeRect(40, 140, 30, 30);

			if (spacePress2) {
				context.beginPath();
				context.moveTo(40, 140);
				context.lineTo(70, 170);
				context.moveTo(40, 170);
				context.lineTo(70, 140);
				context.stroke();
			}
			
			for (var i = 0;i < drums2.length;i++) {
				context.fillStyle = "Blue";
				context.fillRect(990 - 0.33 * (Date.now() - drums2[i]) + 50, 150, 10, 10);

				if (((990 - 0.33 * (Date.now() - drums2[i])) > -20) && ((990 - 0.33 * (Date.now() - drums2[i])) < 20) && spacePress2) {
					drums2.splice(i, 1);
				}
			}
		};

		var inter = undefined;

		onkeydown = function (dwe) {
			if (dwe.keyCode == 32) {
				spacePress = true;
			} else if (dwe.keyCode == 40) {
				spacePress2 = true;
			}
		}
		
		onkeyup = function (dwe) {
			if (dwe.keyCode == 32) {
				spacePress = false;
			} else if (dwe.keyCode == 40) {
				spacePress2 = false;
			}
		}
	</script>
</body>
</html>
